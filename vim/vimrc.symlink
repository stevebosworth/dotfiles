" Install vim-plug if not installed already
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" start plugin defintion
Plug 'scrooloose/nerdtree'
Plug 'vim-scripts/L9'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-ragtag'
Plug 'scrooloose/nerdcommenter'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-dispatch'
Plug 'jiangmiao/auto-pairs'
Plug 'editorconfig/editorconfig-vim'
Plug 'mileszs/ack.vim'
Plug 'tpope/vim-eunuch'
Plug 'NLKNguyen/papercolor-theme'
Plug 'djoshea/vim-autoread'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'ntpeters/vim-better-whitespace'
Plug 'w0rp/ale'
Plug 'itchyny/lightline.vim'
Plug 'maximbaz/lightline-ale'
Plug 'kien/rainbow_parentheses.vim'
Plug 'majutsushi/tagbar'
Plug 'Konfekt/vim-alias'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'janko/vim-test'
Plug 'thaerkh/vim-workspace'
Plug 'Yggdroot/indentLine'
Plug 'glacambre/firenvim', { 'do': { _ -> firenvim#install(0) } }
" -- Web Development
Plug 'mattn/emmet-vim'
Plug 'hail2u/vim-css3-syntax'
Plug 'ap/vim-css-color'
Plug 'othree/html5.vim'
Plug 'briancollins/vim-jst'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-liquid'
Plug 'nickng/vim-scribble'
Plug 'heavenshell/vim-jsdoc'
Plug 'pangloss/vim-javascript'
Plug 'peitalin/vim-jsx-typescript'
Plug 'leafgarland/typescript-vim'
Plug 'styled-components/vim-styled-components', { 'branch': 'main' }
Plug 'jparise/vim-graphql'
Plug 'wakatime/vim-wakatime'
Plug 'kana/vim-textobj-user'
Plug 'nelstrom/vim-textobj-rubyblock'
Plug 'tomlion/vim-solidity'

" -- Python Dev
Plug 'vim-scripts/indentpython.vim'

" -- RUST Dev
Plug 'cespare/vim-toml'
Plug 'rust-lang/rust.vim'

call plug#end()

" don't make vim compatible with vi
set nocompatible

" set filetype off for now
filetype off

" and show line numbers
set number

" reload files changed outside vim
set autoread

" encoding is utf 8
set encoding=utf-8
set fileencoding=utf-8

" enable matchit plugin which ships with vim and greatly enhances '%'
runtime macros/matchit.vim

" by default, in insert mode backspace won't delete over line breaks, or
" automatically-inserted indentation, let's change that
set backspace=indent,eol,start

" dont't unload buffers when they are abandoned, instead stay in the
" background
set hidden

" set unix line endings
set fileformat=unix
" when reading files try unix line endings then dos, also use unix for new
" buffers
set fileformats=unix,dos

" save up to 100 marks, enable capital marks
set viminfo='100,f1

" case sensitivity
set ignorecase
set smartcase

" screen will not be redrawn while running macros, registers or other
" non-typed comments
set lazyredraw

" allow scrolling with the mouse
set mouse=a

" Allow project specific vimrc
set exrc

" ---------------------- CUSTOMIZATION ----------------------
"  The following are some extra mappings/configs to enhance my personal
"  VIM experience

" set , as mapleader
let mapleader = ","

" set python version for neovim
let g:python3_host_prog = "/opt/homebrew/bin/python3"

" map <leader>q and <leader>w to buffer prev/next buffer
noremap <leader>q :bp<CR>
noremap <leader>w :bn<CR>

" hide unnecessary gui in gVim
if has("gui_running")
  set guioptions-=m  " remove menu bar
  set guioptions-=T  " remove toolbar
  set guioptions-=r  " remove right-hand scroll bar
  set guioptions-=L  " remove left-hand scroll bar
end

" set Ubuntu Mono font as default
set guifont=Ubuntu\ Mono\ derivative\ Powerline:h15
" allow Tab and Shift+Tab to
" tab  selection in visual mode
vmap <Tab> >gv
vmap <S-Tab> <gv

" remove the .ext~ files, but not the swapfiles
set nobackup
set writebackup
set noswapfile

" search settings
set incsearch        " find the next match as we type the search
set hlsearch         " hilight searches by default
" use ESC to remove search higlight
nnoremap <esc> :noh<return><esc>

" suggestion for normal mode commands
set wildmode=list:longest

" keep the cursor visible within 3 lines when scrolling
set scrolloff=3

" indentation
set expandtab       " use spaces instead of tabs
set autoindent      " autoindent based on line above, works most of the time
set smartindent     " smarter indent for C-like languages
set shiftwidth=2    " when reading, tabs are 2 spaces
set softtabstop=2   " in insert mode, tabs are 2 spaces

" On file types...
"   .md files are markdown files
autocmd BufNewFile,BufRead *.md setlocal ft=markdown tw=80 formatoptions+=t
"   .twig files use html syntax
autocmd BufNewFile,BufRead *.twig setlocal ft=html
"   .less files use less syntax
autocmd BufNewFile,BufRead *.less setlocal ft=less
"   .jade files use jade syntax
autocmd BufNewFile,BufRead *.jade setlocal ft=jade
"   .js.liquid files use .js.liquid syntax
autocmd BufNewFile,BufRead *.js.liquid setlocal ft=JavaScript
"   .scss files use scss syntax
autocmd BufNewFile,BufRead *.scss.liquid setlocal ft=scss
"   Guardfile files use ruby syntax
autocmd BufNewFile,BufRead Guardfile setlocal ft=ruby
" set filetypes as typescriptreact
autocmd BufNewFile,BufRead *.tsx,*.jsx set filetype=typescriptreact

au BufNewFile,BufRead *.py
    \ setlocal ft=python
    \ setlocal tabstop=4
    \ setlocal softtabstop=4
    \ setlocal shiftwidth=4
    \ setlocal textwidth=79
    \ setlocal fileformat=unix

" Reload Syntax for TS and JS file
autocmd BufEnter *.{js,jsx,ts,tsx} :syntax sync fromstart
autocmd BufLeave *.{js,jsx,ts,tsx} :syntax sync clear


" enable proper syntax highlighting in markdown code blocks
let g:markdown_fenced_languages = ['html', 'python', 'ruby', 'vim', 'javascript', 'css']

"------------ Python Dev Setup --------------

au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" when pasting over SSH it's a pain to type :set paste and :set nopaste
" just map it to <f9>
"set pastetoggle=<f9>

" if windows...
if has('win32')
  " start maximized
  autocmd GUIEnter * simalt ~x
  " also use .vim instead of vimfiles, make sure to run the following command
  " once this was copied to /Users/<user>/.vim
  "  mklink %homepath%/.vimrc %homepath%/.vim/.vimrc
  let &runtimepath.=',$HOME/.vim'
endif

" turn on syntax highlighting
syntax enable

" make vim try to detect file types and load plugins for them
filetype on
filetype plugin on
filetype indent on

"auto resize windows
autocmd VimResized * wincmd =

" set the color theme
set background=dark
colorscheme PaperColor

"Show trailing whitespaces
set list listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:-,trail:-

" make a mark for column 80
" and set the mark color to DarkSlateGray
if exists('+colorcolumn')
  set colorcolumn=120
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif

"Set different cursors for insert and commmand modes
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

"Set folding to indent by default
set foldmethod=indent
set foldlevel=20

set selection=exclusive

" ---------------------- PLUGIN CONFIGURATION ----------------------

" ---------------------- NerdCommenter ----------------------
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1

" ---------------------- Ragtag Setup ----------------------
let g:ragtag_global_maps = 1

" ---------------------- IndentLine Setup ----------------------
" IndentLine hides quotes in JSON files
let g:vim_json_syntax_conceal = 0


" ---------------------- AutoPairs Setup ----------------------

let g:AutoPairsFlyMode = 0
" Jump outside '"({
let g:AutoPairsShortcutJump = ''
inoremap <c-l> :call AutoPairsShortcutJump()

if !exists('g:AutoPairsShortcutJump')
endif


" ---------------------- FZF Setup ----------------------
nnoremap <silent> <C-p> :call FZFOpen(':Files')<cr>
nnoremap <silent> <C-b> :call FZFOpen(':Buffers')<CR>

nnoremap <c-b> :Buffers<cr>
nnoremap <C-b> :Buffers<cr>

let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit' }

" Prevent fzf from opening a file in the nerd tree buffer
function! FZFOpen(command_str)
  if (expand('%') =~# 'NERD_tree' && winnr('$') > 1)
    exe "normal! \<c-w>\<c-w>"
  endif
  exe 'normal! ' . a:command_str . "\<cr>"
endfunction

if executable('ag')
  "Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor
  let g:ackprg = 'ag --nogroup --nocolor --column --ignore-dir={node_modules,dist,.git,screenshots,.next}'
endif


" ---------------------- Text find and replace Setup ----------------------
nnoremap <leader>a :Ack!<Space>

nnoremap <C-f> :Ack! "<C-R><C-W>"
vnoremap <C-f> :Ack! "<C-R><C-W>"

" ---------------------- NERDTree Setup ----------------------
map <C-n> :NERDTreeToggle<CR>
map <leader>n :NERDTreeFind<CR>

"quit NERDTree with :q
function! NERDTreeQuit()
  redir => buffersoutput
  silent buffers
  redir END
  "                     1BufNo  2Mods.     3File           4LineNo
  let pattern = '^\s*\(\d\+\)\(.....\) "\(.*\)"\s\+line \(\d\+\)$'
  let windowfound = 0

  for bline in split(buffersoutput, "\n")
    let m = matchlist(bline, pattern)

    if (len(m) > 0)
      if (m[2] =~ '..a..')
        let windowfound = 1
      endif
    endif
  endfor

  if (!windowfound)
    quitall
  endif
endfunction
autocmd WinEnter * call NERDTreeQuit()

set wildignore+=*.pyc,*.o,*.obj,*.svn,*.swp,*.class,*.hg,*.DS_Store,*.min.*

" Nerdtree config for wildignore
let NERDTreeRespectWildIgnore=1

" ---------------------- Emmet Setup ----------------------
let g:user_emmet_leader_key = '<c-e>'
let g:user_emmet_settings = {
  \  'javascript.jsx' : {
    \      'extends' : 'jsx',
    \  },
  \}

" ---------------------- COC Setup ----------------------
let g:coc_global_extensions = [
  \ 'coc-java',
  \ 'coc-css',
  \ 'coc-json',
  \ 'coc-html',
  \ 'coc-yaml',
  \ 'coc-snippets',
  \ 'coc-marketplace',
  \ 'coc-tsserver',
  \ 'coc-eslint',
  \ 'coc-stylelint',
  \ 'coc-prettier',
  \ 'coc-solargraph',
  \ 'coc-rls',
  \ 'coc-tailwindcss',
  \ ]

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
" Go to definition in splits
" nmap <silent> gs :sp<CR><Plug>(coc-definition)
" nmap <silent> gv :vsp<CR><Plug>(coc-definition)

nmap <silent> gt <Plug>(coc-type-definition)
nmap <silent> gc <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> sd :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" ---------------------- Ale Setup ----------------------
let g:ale_fixers = {
  \ 'javascript': ['prettier'],
  \ 'css': ['stylelint'],
  \ 'scss': ['stylelint'],
  \ 'html': ['prettier'],
  \ 'json': ['prettier']
  \ }
let g:ale_linters = {
  \'ruby': ['rubocop'],
  \ 'css': ['stylelint'],
  \ 'scss': ['stylelint'],
  \ }
let g:ale_ruby_rubocop_executable = 'bundle'  "use local bundle exec version
let g:ale_lint_on_text_changed = 0
let g:ale_lint_on_enter = 0
let g:ale_lint_on_save = 1

let g:ale_sign_column_always = 1
let g:ale_fix_on_save = 0
let g:ale_javascript_prettier_use_local_config = 1
let g:ale_linters_explicit = 1

nmap <leader>d <Plug>(ale_fix)
nmap <leader>l <Plug>(ale_lint)

" ---------------------- Vim Test ----------------------

" set test strategy for vim-test
let test#strategy = "dispatch"

nmap <silent> t<C-n> :TestNearest<CR>
nmap <silent> t<C-f> :TestFile<CR>
nmap <silent> t<C-s> :TestSuite<CR>
nmap <silent> t<C-l> :TestLast<CR>
nmap <silent> t<C-g> :TestVisit<CR>

" ---------------------- Workspace Sessions ----------------------

let g:workspace_session_directory = $HOME . '/.vim/sessions/'
let g:workspace_persist_undo_history = 1  " enabled = 1 (default), disabled = 0
let g:workspace_undodir='.undodir'

" ---------------------- Ctags ----------------------

nmap <leader>t :TagbarToggle<CR>

" ---------------------- Rainbow Parentheses Setup ----------------------
let g:rbpt_colorpairs = [
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]

let g:rbpt_max = 11
let g:rbpt_loadcmd_toggle = 0

au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" ---------------------- Better Whitespace ----------------------

let g:better_whitespace_enabled=1
let g:strip_whitespace_on_save=1
let g:strip_whitespace_confirm=0

" ---------------------- Indent Guides ----------------------
let g:indentLine_conceallevel = 2
let g:indentLine_setConceal = 0

" ---------------------- LightLine ----------------------

let g:lightline = {
      \ 'colorscheme': 'powerline',
      \ 'mode_map': { 'c': 'NORMAL' },
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename', 'cocstatus' ] ],
      \   'right': [ [ 'linter_errors', 'linter_warnings', 'linter_ok' ],
      \              [ 'lineinfo' ],
      \              [ 'percent' ],
      \              [ 'fileformat', 'fileencoding', 'filetype' ] ]
      \ },
      \ 'component_expand': {
      \   'linter_warnings': 'LightlineLinterWarnings',
      \   'linter_errors': 'LightlineLinterErrors',
      \   'linter_ok': 'LightlineLinterOK'
      \ },
      \ 'component_function': {
      \   'modified': 'MyModified',
      \   'readonly': 'MyReadonly',
      \   'fugitive': 'MyFugitive',
      \   'filename': 'MyFilename',
      \   'fileformat': 'MyFileformat',
      \   'filetype': 'MyFiletype',
      \   'fileencoding': 'MyFileencoding',
      \   'mode': 'MyMode',
      \   'cocstatus': 'coc#status',
      \ },
      \ 'component_type': {
      \     'linter_warnings': 'warning',
      \     'linter_errors': 'error',
      \     'linter_ok': 'left',
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' }
      \ }

function! MyModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? '' : ''
endfunction

function! MyFilename()
  return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? vimshell#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
  if &ft !~? 'vimfiler\|gundo' && exists("*fugitive#head")
    let _ = fugitive#head()
    return strlen(_) ? ''._ : ''
  endif
  return ''
endfunction

function! MyFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
  return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! LightlineLinterWarnings() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ◆', all_non_errors)
endfunction

function! LightlineLinterErrors() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ✗', all_errors)
endfunction

function! LightlineLinterOK() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '✓ ' : ''
endfunction

" always show lightline
set laststatus=2

" ---------------------- KEY REMAPPING ----------------------

" use <C-Space> for Vim's keyword autocomplete
"  ...in the terminal
inoremap <Nul> <C-n>
"  ...and in gui mode
inoremap <C-Space> <C-n>

" Ctrl-j/k deletes blank line below/above, and Alt-j/k inserts.
nnoremap <silent>J m`:silent +g/\m^\s*$/d<CR>``:noh<CR>
nnoremap <silent>K m`:silent -g/\m^\s*$/d<CR>``:noh<CR>
nnoremap <silent>“ :set paste<CR>m`o<Esc>``:set nopaste<CR>
nnoremap <silent>‘ :set paste<CR>m`O<Esc>``:set nopaste<CR>

" Use kj to exit insert mode
inoremap kj <esc>
cnoremap kj <esc>
vnoremap kj <esc>

nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

nmap <up> <nop>
nmap <down> <nop>
nmap <left> <nop>
nmap <right> <nop>

vmap <up> <nop>
vmap <down> <nop>
vmap <left> <nop>
vmap <right> <nop>

" FZF available commands
nnoremap <C-C> :Command<CR>
vnoremap <C-C> :Command<CR>

" Go to send of line and insert
inoremap LL <Esc>A

" Add space in behind cursor
nnoremap ss i<space><esc>

" reset case switching
vmap u <nop>
vmap U <nop>

" Toggle between UPPER lower and Title case with ~ in visual mode
function! TwiddleCase(str)
  if a:str ==# toupper(a:str)
    let result = tolower(a:str)
  elseif a:str ==# tolower(a:str)
    let result = substitute(a:str,'\(\<\w\+\>\)', '\u\1', 'g')
  else
    let result = toupper(a:str)
  endif
  return result
endfunction
vnoremap ~ y:call setreg('', TwiddleCase(@"), getregtype(''))<CR>gv""Pgv

" " Copy to clipboard
vnoremap  <leader>y  "+y
nnoremap  <leader>Y  "+yg_
nnoremap  <leader>y  "+y
nnoremap  <leader>yy  "+yy

" " Paste from clipboard
nnoremap <leader>p "+p
nnoremap <leader>P "+P
vnoremap <leader>p "+p
vnoremap <leader>P "+P

nnoremap <C-b> :Buffers<CR>
nnoremap <leader>m :History<CR>

vnoremap // y/\V<C-r>=escape(@",'/\')<CR><CR>

vnoremap //r "hy:%s/<C-r>h//g<left><left>

command! PrettyJSON %!jq '.'
command! PrettyHTML !tidy -mi -html -wrap 0 %
command! PrettyXML !tidy -mi -xml -wrap 0 %

augroup myvimrc
  au!
  au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END

" Autoload .vimrc
augroup reload_vimrc " {
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END " }

" set secure to protect project specific vimrc
set secure

